{"version":3,"sources":["theme.ts","utility/style-checker.ts","components/time-sheet/time-sheet-row.component.tsx","components/custom-select/custom-select.component.tsx","components/form/configured-field.component.tsx","components/form/configured-form.component.tsx","components/time-sheet/time-sheet-input.component.tsx","components/time-sheet/time-sheet.view.tsx","components/time-sheet/time-sheet.container.tsx","pages/home/home.view.tsx","pages/home/home.container.tsx","App.tsx","index.tsx"],"names":["theme","extendTheme","fonts","heading","body","checkStyles","styles","componentName","allowedStyles","Object","keys","forEach","style","undefined","find","allowedStyle","Error","TimeSheetRow","isHeader","templateColumns","w","borderBottom","fontSize","CustomSelect","onChange","options","value","name","useState","selectValue","setSelectValue","optionValue","ConfiguredField","id","textArea","rest","as","Textarea","Input","ConfiguredForm","children","formName","formStyles","initialValues","onSubmit","values","formikBag","Form","padLeadingZeros","num","amount","newNum","length","TimeSheetInput","times","useMemo","tempTimes","hour","minute","push","tempOptions","time","index","label","description","startTime","endTime","elapsedTime","console","log","flexDir","columnGap","mt","spacing","Flex","borderRadius","handleChange","h","setFieldValue","justifyContent","alignItems","type","TimeSheetView","i","maxH","overflow","map","elem","bgColor","Math","random","TimeSheet","HomeView","Home","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d66dad5a.chunk.js","sourcesContent":["import { extendTheme } from '@chakra-ui/react';\r\n\r\nconst theme = extendTheme({\r\n  fonts: {\r\n    heading: 'Open Sans',\r\n    body: 'Open Sans',\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","export interface Styles {\r\n  [property: string]: string | number;\r\n}\r\n\r\nexport const checkStyles = (\r\n  styles: Styles | undefined,\r\n  componentName: string,\r\n  allowedStyles: string[]\r\n): Styles | undefined => {\r\n  if (styles) {\r\n    Object.keys(styles).forEach((style) => {\r\n      if (allowedStyles.find((allowedStyle) => allowedStyle === style) === undefined) {\r\n        throw new Error(`The style '${style}' is not allowed in ${componentName}`);\r\n      }\r\n\r\n      return styles;\r\n    });\r\n  }\r\n\r\n  return styles;\r\n};\r\n","import React from 'react';\r\nimport { Flex, Grid, Heading, Text } from '@chakra-ui/react';\r\nimport { checkStyles, Styles } from '../../utility/style-checker';\r\n\r\ninterface TimeSheetRowProps {\r\n  isHeader?: boolean;\r\n  styles?: Styles;\r\n}\r\n\r\nexport const TimeSheetRow: React.FC<TimeSheetRowProps> = ({ isHeader, styles }) => {\r\n  const allowedStyles = ['bgColor'];\r\n\r\n  checkStyles(styles, 'time-sheet.view', allowedStyles);\r\n\r\n  return isHeader ? (\r\n    <Grid templateColumns=\"3fr 2fr 2fr 1.75fr\" w=\"100%\" borderBottom=\"1px solid black\" {...styles}>\r\n      <Flex>\r\n        <Heading>Description</Heading>\r\n      </Flex>\r\n      <Flex>\r\n        <Heading>Start time</Heading>\r\n      </Flex>\r\n      <Flex>\r\n        <Heading>End time</Heading>\r\n      </Flex>\r\n      <Flex>\r\n        <Heading>Elapsed time</Heading>\r\n      </Flex>\r\n    </Grid>\r\n  ) : (\r\n    <Grid templateColumns=\"3fr 2fr 2fr 1.75fr\" w=\"100%\" {...styles}>\r\n      <Flex>\r\n        <Text fontSize=\"24\">Test description</Text>\r\n      </Flex>\r\n      <Flex>\r\n        <Text fontSize=\"24\">09:00</Text>\r\n      </Flex>\r\n      <Flex>\r\n        <Text fontSize=\"24\">10:00</Text>\r\n      </Flex>\r\n      <Flex>\r\n        <Text fontSize=\"24\">1h</Text>\r\n      </Flex>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\nimport Select from 'react-select';\n\nexport interface SelectProps<OptionType> {\n  onChange: (optionValue: OptionType | null) => void;\n  options: OptionType[];\n  value?: OptionType;\n  name?: string;\n}\n\nexport const CustomSelect = <OptionType,>({\n  onChange,\n  options,\n  value,\n  name,\n}: SelectProps<OptionType>): React.ReactElement => {\n  const [selectValue, setSelectValue] = useState<OptionType | null>(value ?? null);\n\n  const onSelectChange = (optionValue: OptionType | null) => {\n    setSelectValue(optionValue);\n    onChange(optionValue);\n  };\n\n  return <Select options={options} onChange={onSelectChange} value={selectValue} name={name} />;\n};\n","import React from 'react';\nimport { Input, InputProps, Textarea } from '@chakra-ui/react';\nimport { Field } from 'formik';\nimport { checkStyles, Styles } from '../../utility';\n\ninterface ConfiguredFieldProps extends InputProps {\n  name: string;\n  id: string;\n  styles?: Styles;\n  textArea?: boolean;\n}\n\nexport const ConfiguredField: React.FC<ConfiguredFieldProps> = ({ name, id, styles, textArea, ...rest }) => {\n  const allowedStyles = ['h'];\n  checkStyles(styles, name, allowedStyles);\n\n  return <Field name={name} id={id} as={textArea ? Textarea : Input} {...styles} {...rest} />;\n};\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\nimport { Form, Formik, FormikProps } from 'formik';\nimport { checkStyles, Styles } from '../../utility';\n\n// REVIEW:\ninterface ConfiguredFormProps<Schema> {\n  children: React.ReactNode;\n  formName: string;\n  formStyles: Styles;\n  initialValues: Schema;\n  onSubmit: (values: Schema) => void;\n}\n\nexport const ConfiguredForm = <Schema,>({\n  children,\n  formName,\n  formStyles,\n  initialValues,\n  onSubmit,\n}: ConfiguredFormProps<Schema>): React.ReactElement => {\n  const allowedStyles: string[] = ['w'];\n  checkStyles(formStyles, formName, allowedStyles);\n\n  const handleSubmit = (values: Schema) => {\n    onSubmit(values);\n  };\n\n  return (\n    <Formik<Schema> initialValues={initialValues} onSubmit={handleSubmit}>\n      {(formikBag: FormikProps<Schema>) => {\n        return (\n          <Box as={Form} {...formStyles}>\n            {(children as (bag: FormikProps<Schema>) => React.ReactNode)(formikBag as FormikProps<Schema>)}\n          </Box>\n        );\n      }}\n    </Formik>\n  );\n};\n","import React, { useMemo } from 'react';\r\nimport { FormikProps } from 'formik';\r\nimport { Button, Flex, FormControl, FormLabel, VStack } from '@chakra-ui/react';\r\nimport { CustomSelect } from '../custom-select';\r\nimport { ConfiguredField, ConfiguredForm } from '../form';\r\nimport { TimeSheetSchema } from './time-sheet.model';\r\n\r\nconst padLeadingZeros = (num: string, amount: number) => {\r\n  let newNum = num;\r\n  while (newNum.length < amount) newNum = `${0}${num}`;\r\n\r\n  return newNum;\r\n};\r\n\r\ninterface TimeOption {\r\n  value: number;\r\n  label: string;\r\n}\r\n\r\nexport const TimeSheetInput: React.FC = () => {\r\n  const times = useMemo(() => {\r\n    const tempTimes: string[] = [];\r\n\r\n    for (let hour = 0; hour <= 24; hour += 1) {\r\n      for (let minute = 0; minute < 60; minute += 5) {\r\n        tempTimes.push(`${padLeadingZeros(`${hour}`, 2)}:${padLeadingZeros(`${minute}`, 2)}`);\r\n      }\r\n    }\r\n    return tempTimes;\r\n  }, []);\r\n\r\n  const options = useMemo(() => {\r\n    const tempOptions: TimeOption[] = [];\r\n    times.forEach((time, index) => {\r\n      tempOptions.push({ label: time, value: index * 5 });\r\n    });\r\n    return tempOptions;\r\n  }, []);\r\n\r\n  const onSubmit = (values: TimeSheetSchema) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const initialValues: TimeSheetSchema = {\r\n    description: '',\r\n    startTime: '09:00',\r\n    endTime: '10:00',\r\n    elapsedTime: '1h',\r\n  };\r\n\r\n  return (\r\n    <ConfiguredForm<TimeSheetSchema>\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      formStyles={{ w: '100%' }}\r\n      formName=\"time-sheet-row-input.component\"\r\n    >\r\n      {(formikBag: FormikProps<TimeSheetSchema>) => (\r\n        <VStack flexDir=\"column\" w=\"20rem\" columnGap=\"2\" mt=\"2.8rem\" spacing=\"3\">\r\n          <FormControl as={Flex} id=\"description\" flexDir=\"column\">\r\n            <FormLabel>Description</FormLabel>\r\n            <ConfiguredField\r\n              borderRadius=\"none\"\r\n              id=\"description\"\r\n              name=\"description\"\r\n              onChange={formikBag.handleChange}\r\n              styles={{ h: '24' }}\r\n              textArea\r\n            />\r\n          </FormControl>\r\n          <FormControl as={Flex} id=\"startTime\" flexDir=\"column\">\r\n            <FormLabel>Start time</FormLabel>\r\n            <CustomSelect<TimeOption>\r\n              name=\"startTime\"\r\n              onChange={(optionValue) => optionValue && formikBag.setFieldValue('startTime', optionValue.value)}\r\n              options={options}\r\n            />\r\n          </FormControl>\r\n          <FormControl as={Flex} id=\"endTime\" flexDir=\"column\">\r\n            <FormLabel>End time</FormLabel>\r\n            <CustomSelect<TimeOption>\r\n              name=\"endTime\"\r\n              onChange={(optionValue) => optionValue && formikBag.setFieldValue('endTime', optionValue.value)}\r\n              options={options}\r\n            />\r\n          </FormControl>\r\n          <Flex flexDir=\"column\" justifyContent=\"flex-end\" alignItems=\"flex-start\" w=\"100%\">\r\n            <Button type=\"submit\">Add time</Button>\r\n          </Flex>\r\n        </VStack>\r\n      )}\r\n    </ConfiguredForm>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Flex, Grid, VStack } from '@chakra-ui/react';\r\nimport { TimeSheetRow } from './time-sheet-row.component';\r\nimport { TimeSheetInput } from './time-sheet-input.component';\r\n\r\n// REVIEW:\r\n\r\nexport const TimeSheetView: React.FC = () => {\r\n  const amount: number[] = [];\r\n  for (let i = 0; i < 2; i += 1) {\r\n    amount.push(i);\r\n  }\r\n  return (\r\n    <Flex flexDir=\"column\" h=\"80vh\" justifyContent=\"flex-start\">\r\n      <Grid templateColumns=\"4fr 1fr\" columnGap=\"5\" h=\"100%\">\r\n        <VStack>\r\n          <TimeSheetRow isHeader />\r\n          <VStack w=\"100%\" maxH=\"70vh\" overflow=\"auto\" spacing=\"none\">\r\n            {amount.map((elem) => {\r\n              if (elem % 2 === 0) {\r\n                return <TimeSheetRow key={Math.random()} styles={{ bgColor: 'gray.200' }} />;\r\n              }\r\n\r\n              return <TimeSheetRow key={Math.random()} styles={{ bgColor: 'gray.50' }} />;\r\n            })}\r\n          </VStack>\r\n        </VStack>\r\n        <TimeSheetInput />\r\n      </Grid>\r\n    </Flex>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { TimeSheetView } from './time-sheet.view';\r\n\r\n// REVIEW:\r\n// interface TimeSheetContainerProps {}\r\n\r\nexport const TimeSheetContainer: React.FC = () => {\r\n  return <TimeSheetView />;\r\n};\r\n\r\nexport const TimeSheet = TimeSheetContainer;\r\n","import React from 'react';\r\nimport { Center } from '@chakra-ui/react';\r\nimport { TimeSheet } from '../../components';\r\n\r\nexport const HomeView: React.FC = () => {\r\n  return (\r\n    <Center w=\"110rem\">\r\n      <TimeSheet />\r\n    </Center>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { HomeView } from './home.view';\r\n\r\nconst HomeContainer: React.FC = () => {\r\n  return <HomeView />;\r\n};\r\n\r\nexport const Home = HomeContainer;\r\n","import React from 'react';\r\nimport { Center, ChakraProvider } from '@chakra-ui/react';\r\nimport theme from './theme';\r\nimport { Home } from './pages';\r\n\r\nconst App: React.FunctionComponent = () => {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <Center w=\"100vw\" h=\"100vh\">\r\n        <Home />\r\n      </Center>\r\n    </ChakraProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}